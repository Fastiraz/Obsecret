/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SecretBlock
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var SecretBlock = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.password = "CHANGE_IT";
  }
  async onload() {
    this.registerMarkdownCodeBlockProcessor("lock", (source, el, _) => {
      const container = el.createEl("div");
      container.className = "secret";
      const rows = source.split("\n");
      for (let row of rows)
        container.createEl("div", { text: row });
      container.addEventListener("click", async () => {
        if (container.className === "secret") {
          await new Promise((resolve) => {
            const modal = new PassModal(this.app, (result) => {
              new import_obsidian.Notice(`Password entered: ${result}`);
              this.res = result;
              modal.close();
              resolve();
            });
            modal.open();
          });
          if (this.res === this.password) {
            container.className = "secret-show";
            new import_obsidian.Notice("The content is no longer hidden.");
            this.res = "";
          } else {
            container.className = "secret";
            new import_obsidian.Notice("Invalid password!");
          }
        }
      });
      container.addEventListener("dblclick", () => {
        if (container.className === "secret-show") {
          container.className = "secret";
          new import_obsidian.Notice("The content has been hidden.");
        }
      });
    });
  }
  async openModal() {
    const modal = new PassModal(this.app, (result) => {
      this.res = result;
    });
    modal.open();
  }
};
var PassModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "Enter your password to read that." });
    new import_obsidian.Setting(contentEl).setName("Password").addText((text) => text.onChange((value) => {
      this.result = value;
    }));
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Submit").setCta().onClick(() => {
      this.close();
      this.onSubmit(this.result);
    }));
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBNYXJrZG93blJlbmRlcmVyLCBBcHAsIE1vZGFsLCBTZXR0aW5nLCBOb3RpY2UsIGFkZEljb24gfSBmcm9tICdvYnNpZGlhbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlY3JldEJsb2NrIGV4dGVuZHMgUGx1Z2luIHtcblx0cHVibGljIHJlczogc3RyaW5nO1xuXHRwdWJsaWMgcGFzc3dvcmQgPSBcIkNIQU5HRV9JVFwiO1xuXG5cdGFzeW5jIG9ubG9hZCgpIHtcblx0XHQvLyBUaGlzIFxuXHRcdHRoaXMucmVnaXN0ZXJNYXJrZG93bkNvZGVCbG9ja1Byb2Nlc3NvcihcImxvY2tcIiwgKHNvdXJjZSwgZWwsIF8pID0+IHtcblx0XHRcdGNvbnN0IGNvbnRhaW5lciA9IGVsLmNyZWF0ZUVsKFwiZGl2XCIpO1xuXHRcdFx0Y29udGFpbmVyLmNsYXNzTmFtZSA9IFwic2VjcmV0XCI7XG5cblx0XHRcdGNvbnN0IHJvd3MgPSBzb3VyY2Uuc3BsaXQoXCJcXG5cIik7XG5cdFx0XHRmb3IgKGxldCByb3cgb2Ygcm93cylcblx0XHRcdFx0Y29udGFpbmVyLmNyZWF0ZUVsKFwiZGl2XCIsIHsgdGV4dDogcm93IH0pO1xuXG5cdFx0XHQvKmNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRpZiAoY29udGFpbmVyLmNsYXNzTmFtZSA9PT0gXCJzZWNyZXRcIikge1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMub3Blbk1vZGFsKCk7IC8vIFdhaXQgZm9yIG1vZGFsIHRvIGJlIGNsb3NlZFxuXHRcdFx0XHRcdGlmICh0aGlzLnJlcyA9PT0gdGhpcy5wYXNzd29yZCkge1xuXHRcdFx0XHRcdFx0Y29udGFpbmVyLmNsYXNzTmFtZSA9IFwic2VjcmV0LXNob3dcIjtcblx0XHRcdFx0XHRcdG5ldyBOb3RpY2UoXCJUaGUgY29udGVudCBpcyBubyBsb25nZXIgaGlkZGVuLlwiKTtcblx0XHRcdFx0XHRcdHRoaXMucmVzID0gXCJcIjtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29udGFpbmVyLmNsYXNzTmFtZSA9IFwic2VjcmV0XCI7XG5cdFx0XHRcdFx0XHRuZXcgTm90aWNlKCdJbnZhbGlkIHBhc3N3b3JkIScpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7Ki9cblxuXHRcdFx0Y29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBhc3luYyAoKSA9PiB7XG5cdFx0XHRcdGlmIChjb250YWluZXIuY2xhc3NOYW1lID09PSBcInNlY3JldFwiKSB7XG5cdFx0XHRcdFx0YXdhaXQgbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUpID0+IHtcblx0XHRcdFx0XHRcdGNvbnN0IG1vZGFsID0gbmV3IFBhc3NNb2RhbCh0aGlzLmFwcCwgKHJlc3VsdCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRuZXcgTm90aWNlKGBQYXNzd29yZCBlbnRlcmVkOiAke3Jlc3VsdH1gKTtcblx0XHRcdFx0XHRcdFx0dGhpcy5yZXMgPSByZXN1bHQ7XG5cdFx0XHRcdFx0XHRcdG1vZGFsLmNsb3NlKCk7XG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoKTsgLy8gUmVzb2x2ZSB0aGUgcHJvbWlzZSB3aGVuIHRoZSBtb2RhbCBpcyBjbG9zZWRcblx0XHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0XHRtb2RhbC5vcGVuKCk7XG5cdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHRpZiAodGhpcy5yZXMgPT09IHRoaXMucGFzc3dvcmQpIHtcblx0XHRcdFx0XHRcdGNvbnRhaW5lci5jbGFzc05hbWUgPSBcInNlY3JldC1zaG93XCI7XG5cdFx0XHRcdFx0XHRuZXcgTm90aWNlKFwiVGhlIGNvbnRlbnQgaXMgbm8gbG9uZ2VyIGhpZGRlbi5cIik7XG5cdFx0XHRcdFx0XHR0aGlzLnJlcyA9IFwiXCI7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNvbnRhaW5lci5jbGFzc05hbWUgPSBcInNlY3JldFwiO1xuXHRcdFx0XHRcdFx0bmV3IE5vdGljZShcIkludmFsaWQgcGFzc3dvcmQhXCIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblxuXG5cdFx0XHRjb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcImRibGNsaWNrXCIsICgpID0+IHtcblx0XHRcdFx0aWYgKGNvbnRhaW5lci5jbGFzc05hbWUgPT09IFwic2VjcmV0LXNob3dcIikge1xuXHRcdFx0XHRcdGNvbnRhaW5lci5jbGFzc05hbWUgPSBcInNlY3JldFwiO1xuXHRcdFx0XHRcdG5ldyBOb3RpY2UoJ1RoZSBjb250ZW50IGhhcyBiZWVuIGhpZGRlbi4nKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHR9KTtcblx0fVxuXG5cdGFzeW5jIG9wZW5Nb2RhbCgpIHtcblx0XHRjb25zdCBtb2RhbCA9IG5ldyBQYXNzTW9kYWwodGhpcy5hcHAsIChyZXN1bHQpID0+IHtcblx0XHRcdHRoaXMucmVzID0gcmVzdWx0O1xuXHRcdH0pO1xuXG5cdFx0bW9kYWwub3BlbigpO1xuXHR9XG59XG5cbmNsYXNzIFBhc3NNb2RhbCBleHRlbmRzIE1vZGFsIHtcblx0cmVzdWx0OiBzdHJpbmc7XG5cdG9uU3VibWl0OiAocmVzdWx0OiBzdHJpbmcpID0+IHZvaWQ7XG5cblx0Y29uc3RydWN0b3IoYXBwOiBBcHAsIG9uU3VibWl0OiAocmVzdWx0OiBzdHJpbmcpID0+IHZvaWQpIHtcblx0XHRzdXBlcihhcHApO1xuXHRcdHRoaXMub25TdWJtaXQgPSBvblN1Ym1pdDtcblx0fVxuXG5cdG9uT3BlbigpIHtcblx0XHRjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcblxuXHRcdGNvbnRlbnRFbC5jcmVhdGVFbChcImgxXCIsIHsgdGV4dDogXCJFbnRlciB5b3VyIHBhc3N3b3JkIHRvIHJlYWQgdGhhdC5cIiB9KTtcblxuXHRcdG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcblx0XHRcdC5zZXROYW1lKFwiUGFzc3dvcmRcIilcblx0XHRcdC5hZGRUZXh0KCh0ZXh0KSA9PlxuXHRcdFx0XHR0ZXh0Lm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdHRoaXMucmVzdWx0ID0gdmFsdWVcblx0XHRcdFx0fSkpO1xuXG5cdFx0bmV3IFNldHRpbmcoY29udGVudEVsKVxuXHRcdFx0LmFkZEJ1dHRvbigoYnRuKSA9PlxuXHRcdFx0XHRidG5cblx0XHRcdFx0XHQuc2V0QnV0dG9uVGV4dChcIlN1Ym1pdFwiKVxuXHRcdFx0XHRcdC5zZXRDdGEoKVxuXHRcdFx0XHRcdC5vbkNsaWNrKCgpID0+IHtcblx0XHRcdFx0XHRcdHRoaXMuY2xvc2UoKTtcblx0XHRcdFx0XHRcdHRoaXMub25TdWJtaXQodGhpcy5yZXN1bHQpO1xuXHRcdFx0XHRcdH0pKTtcblx0fVxuXG5cdG9uQ2xvc2UoKSB7XG5cdFx0bGV0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuXHRcdGNvbnRlbnRFbC5lbXB0eSgpO1xuXHR9XG59XG5cbi8qY2xhc3MgUGFzc01vZGFsIGV4dGVuZHMgTW9kYWwge1xuXHRyZXN1bHQ6IHN0cmluZztcblx0b25TdWJtaXQ6IChyZXN1bHQ6IHN0cmluZykgPT4gdm9pZDtcblxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgb25TdWJtaXQ6IChyZXN1bHQ6IHN0cmluZykgPT4gdm9pZCkge1xuXHRcdHN1cGVyKGFwcCk7XG5cdFx0dGhpcy5vblN1Ym1pdCA9IG9uU3VibWl0O1xuXHR9XG5cblx0b25PcGVuKCkge1xuXHRcdGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuXG5cdFx0Y29udGVudEVsLmNyZWF0ZUVsKFwiaDFcIiwgeyB0ZXh0OiBcIkVudGVyIHlvdXIgcGFzc3dvcmQgdG8gcmVhZCB0aGF0LlwiIH0pO1xuXG5cdFx0Y29uc3QgcGFzc3dvcmRJbnB1dCA9IGNvbnRlbnRFbC5jcmVhdGVFbChcImlucHV0XCIsIHtcblx0XHRcdGF0dHI6IHsgdHlwZTogXCJwYXNzd29yZFwiIH0sXG5cdFx0XHRjbHM6IFwibW9kLWlucHV0XCIsXG5cdFx0fSk7XG5cdFx0cGFzc3dvcmRJbnB1dC5vbmlucHV0ID0gKGV2dCkgPT4ge1xuXHRcdFx0dGhpcy5yZXN1bHQgPSAoZXZ0LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZTtcblx0XHR9O1xuXG5cdFx0bmV3IFNldHRpbmcoY29udGVudEVsKVxuXHRcdFx0LmFkZEJ1dHRvbigoYnRuKSA9PlxuXHRcdFx0XHRidG5cblx0XHRcdFx0XHQuc2V0QnV0dG9uVGV4dChcIlN1Ym1pdFwiKVxuXHRcdFx0XHRcdC5zZXRDdGEoKVxuXHRcdFx0XHRcdC5vbkNsaWNrKCgpID0+IHtcblx0XHRcdFx0XHRcdHRoaXMuY2xvc2UoKTtcblx0XHRcdFx0XHRcdHRoaXMub25TdWJtaXQodGhpcy5yZXN1bHQpO1xuXHRcdFx0XHRcdH0pXG5cdFx0XHQpO1xuXHR9XG5cblxuXHRvbkNsb3NlKCkge1xuXHRcdGxldCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcblx0XHRjb250ZW50RWwuZW1wdHkoKTtcblx0fVxufSovXG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBQStFO0FBRS9FLElBQXFCLGNBQXJCLGNBQXlDLHVCQUFPO0FBQUEsRUFBaEQ7QUFBQTtBQUVDLFNBQU8sV0FBVztBQUFBO0FBQUEsRUFFbEIsTUFBTSxTQUFTO0FBRWQsU0FBSyxtQ0FBbUMsUUFBUSxDQUFDLFFBQVEsSUFBSSxNQUFNO0FBQ2xFLFlBQU0sWUFBWSxHQUFHLFNBQVMsS0FBSztBQUNuQyxnQkFBVSxZQUFZO0FBRXRCLFlBQU0sT0FBTyxPQUFPLE1BQU0sSUFBSTtBQUM5QixlQUFTLE9BQU87QUFDZixrQkFBVSxTQUFTLE9BQU8sRUFBRSxNQUFNLElBQUksQ0FBQztBQWdCeEMsZ0JBQVUsaUJBQWlCLFNBQVMsWUFBWTtBQUMvQyxZQUFJLFVBQVUsY0FBYyxVQUFVO0FBQ3JDLGdCQUFNLElBQUksUUFBYyxDQUFDLFlBQVk7QUFDcEMsa0JBQU0sUUFBUSxJQUFJLFVBQVUsS0FBSyxLQUFLLENBQUMsV0FBVztBQUNqRCxrQkFBSSx1QkFBTyxxQkFBcUIsUUFBUTtBQUN4QyxtQkFBSyxNQUFNO0FBQ1gsb0JBQU0sTUFBTTtBQUNaLHNCQUFRO0FBQUEsWUFDVCxDQUFDO0FBRUQsa0JBQU0sS0FBSztBQUFBLFVBQ1osQ0FBQztBQUVELGNBQUksS0FBSyxRQUFRLEtBQUssVUFBVTtBQUMvQixzQkFBVSxZQUFZO0FBQ3RCLGdCQUFJLHVCQUFPLGtDQUFrQztBQUM3QyxpQkFBSyxNQUFNO0FBQUEsVUFDWixPQUFPO0FBQ04sc0JBQVUsWUFBWTtBQUN0QixnQkFBSSx1QkFBTyxtQkFBbUI7QUFBQSxVQUMvQjtBQUFBLFFBQ0Q7QUFBQSxNQUNELENBQUM7QUFJRCxnQkFBVSxpQkFBaUIsWUFBWSxNQUFNO0FBQzVDLFlBQUksVUFBVSxjQUFjLGVBQWU7QUFDMUMsb0JBQVUsWUFBWTtBQUN0QixjQUFJLHVCQUFPLDhCQUE4QjtBQUFBLFFBQzFDO0FBQUEsTUFDRCxDQUFDO0FBQUEsSUFFRixDQUFDO0FBQUEsRUFDRjtBQUFBLEVBRUEsTUFBTSxZQUFZO0FBQ2pCLFVBQU0sUUFBUSxJQUFJLFVBQVUsS0FBSyxLQUFLLENBQUMsV0FBVztBQUNqRCxXQUFLLE1BQU07QUFBQSxJQUNaLENBQUM7QUFFRCxVQUFNLEtBQUs7QUFBQSxFQUNaO0FBQ0Q7QUFFQSxJQUFNLFlBQU4sY0FBd0Isc0JBQU07QUFBQSxFQUk3QixZQUFZLEtBQVUsVUFBb0M7QUFDekQsVUFBTSxHQUFHO0FBQ1QsU0FBSyxXQUFXO0FBQUEsRUFDakI7QUFBQSxFQUVBLFNBQVM7QUFDUixVQUFNLEVBQUUsVUFBVSxJQUFJO0FBRXRCLGNBQVUsU0FBUyxNQUFNLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUV0RSxRQUFJLHdCQUFRLFNBQVMsRUFDbkIsUUFBUSxVQUFVLEVBQ2xCLFFBQVEsQ0FBQyxTQUNULEtBQUssU0FBUyxDQUFDLFVBQVU7QUFDeEIsV0FBSyxTQUFTO0FBQUEsSUFDZixDQUFDLENBQUM7QUFFSixRQUFJLHdCQUFRLFNBQVMsRUFDbkIsVUFBVSxDQUFDLFFBQ1gsSUFDRSxjQUFjLFFBQVEsRUFDdEIsT0FBTyxFQUNQLFFBQVEsTUFBTTtBQUNkLFdBQUssTUFBTTtBQUNYLFdBQUssU0FBUyxLQUFLLE1BQU07QUFBQSxJQUMxQixDQUFDLENBQUM7QUFBQSxFQUNOO0FBQUEsRUFFQSxVQUFVO0FBQ1QsUUFBSSxFQUFFLFVBQVUsSUFBSTtBQUNwQixjQUFVLE1BQU07QUFBQSxFQUNqQjtBQUNEOyIsCiAgIm5hbWVzIjogW10KfQo=
