/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SecretBlock
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var SecretBlock = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.password = "arrow";
  }
  async onload() {
    this.registerMarkdownCodeBlockProcessor("secret-block", (source, el, _) => {
      const container = el.createEl("div");
      container.className = "secret";
      const rows = source.split("\n");
      for (let row of rows)
        container.createEl("div", { text: row });
      container.addEventListener("click", async () => {
        if (container.className === "secret") {
          await new Promise((resolve) => {
            const modal = new PassModal(this.app, (result) => {
              new import_obsidian.Notice(`Password entered: ${result}`);
              this.res = result;
              modal.close();
              resolve();
            });
            modal.open();
          });
          if (this.res === this.password) {
            container.className = "secret-show";
            new import_obsidian.Notice("The content is no longer hidden.");
            this.res = "";
          } else {
            container.className = "secret";
            new import_obsidian.Notice("Invalid password!");
          }
        }
      });
      container.addEventListener("dblclick", () => {
        if (container.className === "secret-show") {
          container.className = "secret";
          new import_obsidian.Notice("The content has been hidden.");
        }
      });
    });
  }
  async openModal() {
    const modal = new PassModal(this.app, (result) => {
      this.res = result;
    });
    modal.open();
  }
};
var PassModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "Enter your password to read that." });
    new import_obsidian.Setting(contentEl).setName("Password").addText((text) => text.onChange((value) => {
      this.result = value;
    }));
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Submit").setCta().onClick(() => {
      this.close();
      this.onSubmit(this.result);
    }));
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBNYXJrZG93blJlbmRlcmVyLCBBcHAsIE1vZGFsLCBTZXR0aW5nLCBOb3RpY2UsIGFkZEljb24gfSBmcm9tICdvYnNpZGlhbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlY3JldEJsb2NrIGV4dGVuZHMgUGx1Z2luIHtcblx0cHVibGljIHJlczogc3RyaW5nO1xuXHRwdWJsaWMgcGFzc3dvcmQgPSBcImFycm93XCI7XG5cblx0YXN5bmMgb25sb2FkKCkge1xuXHRcdC8vIFRoaXMgXG5cdFx0dGhpcy5yZWdpc3Rlck1hcmtkb3duQ29kZUJsb2NrUHJvY2Vzc29yKFwic2VjcmV0LWJsb2NrXCIsIChzb3VyY2UsIGVsLCBfKSA9PiB7XG5cdFx0XHRjb25zdCBjb250YWluZXIgPSBlbC5jcmVhdGVFbChcImRpdlwiKTtcblx0XHRcdGNvbnRhaW5lci5jbGFzc05hbWUgPSBcInNlY3JldFwiO1xuXG5cdFx0XHRjb25zdCByb3dzID0gc291cmNlLnNwbGl0KFwiXFxuXCIpO1xuXHRcdFx0Zm9yIChsZXQgcm93IG9mIHJvd3MpXG5cdFx0XHRcdGNvbnRhaW5lci5jcmVhdGVFbChcImRpdlwiLCB7IHRleHQ6IHJvdyB9KTtcblxuXHRcdFx0Lypjb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGFzeW5jICgpID0+IHtcblx0XHRcdFx0aWYgKGNvbnRhaW5lci5jbGFzc05hbWUgPT09IFwic2VjcmV0XCIpIHtcblx0XHRcdFx0XHRhd2FpdCB0aGlzLm9wZW5Nb2RhbCgpOyAvLyBXYWl0IGZvciBtb2RhbCB0byBiZSBjbG9zZWRcblx0XHRcdFx0XHRpZiAodGhpcy5yZXMgPT09IHRoaXMucGFzc3dvcmQpIHtcblx0XHRcdFx0XHRcdGNvbnRhaW5lci5jbGFzc05hbWUgPSBcInNlY3JldC1zaG93XCI7XG5cdFx0XHRcdFx0XHRuZXcgTm90aWNlKFwiVGhlIGNvbnRlbnQgaXMgbm8gbG9uZ2VyIGhpZGRlbi5cIik7XG5cdFx0XHRcdFx0XHR0aGlzLnJlcyA9IFwiXCI7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNvbnRhaW5lci5jbGFzc05hbWUgPSBcInNlY3JldFwiO1xuXHRcdFx0XHRcdFx0bmV3IE5vdGljZSgnSW52YWxpZCBwYXNzd29yZCEnKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pOyovXG5cblx0XHRcdGNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRpZiAoY29udGFpbmVyLmNsYXNzTmFtZSA9PT0gXCJzZWNyZXRcIikge1xuXHRcdFx0XHRcdGF3YWl0IG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlKSA9PiB7XG5cdFx0XHRcdFx0XHRjb25zdCBtb2RhbCA9IG5ldyBQYXNzTW9kYWwodGhpcy5hcHAsIChyZXN1bHQpID0+IHtcblx0XHRcdFx0XHRcdFx0bmV3IE5vdGljZShgUGFzc3dvcmQgZW50ZXJlZDogJHtyZXN1bHR9YCk7XG5cdFx0XHRcdFx0XHRcdHRoaXMucmVzID0gcmVzdWx0O1xuXHRcdFx0XHRcdFx0XHRtb2RhbC5jbG9zZSgpO1xuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKCk7IC8vIFJlc29sdmUgdGhlIHByb21pc2Ugd2hlbiB0aGUgbW9kYWwgaXMgY2xvc2VkXG5cdFx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdFx0bW9kYWwub3BlbigpO1xuXHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0aWYgKHRoaXMucmVzID09PSB0aGlzLnBhc3N3b3JkKSB7XG5cdFx0XHRcdFx0XHRjb250YWluZXIuY2xhc3NOYW1lID0gXCJzZWNyZXQtc2hvd1wiO1xuXHRcdFx0XHRcdFx0bmV3IE5vdGljZShcIlRoZSBjb250ZW50IGlzIG5vIGxvbmdlciBoaWRkZW4uXCIpO1xuXHRcdFx0XHRcdFx0dGhpcy5yZXMgPSBcIlwiO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb250YWluZXIuY2xhc3NOYW1lID0gXCJzZWNyZXRcIjtcblx0XHRcdFx0XHRcdG5ldyBOb3RpY2UoXCJJbnZhbGlkIHBhc3N3b3JkIVwiKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cblxuXHRcdFx0Y29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJkYmxjbGlja1wiLCAoKSA9PiB7XG5cdFx0XHRcdGlmIChjb250YWluZXIuY2xhc3NOYW1lID09PSBcInNlY3JldC1zaG93XCIpIHtcblx0XHRcdFx0XHRjb250YWluZXIuY2xhc3NOYW1lID0gXCJzZWNyZXRcIjtcblx0XHRcdFx0XHRuZXcgTm90aWNlKCdUaGUgY29udGVudCBoYXMgYmVlbiBoaWRkZW4uJyk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0fSk7XG5cdH1cblxuXHRhc3luYyBvcGVuTW9kYWwoKSB7XG5cdFx0Y29uc3QgbW9kYWwgPSBuZXcgUGFzc01vZGFsKHRoaXMuYXBwLCAocmVzdWx0KSA9PiB7XG5cdFx0XHR0aGlzLnJlcyA9IHJlc3VsdDtcblx0XHR9KTtcblxuXHRcdG1vZGFsLm9wZW4oKTtcblx0fVxufVxuXG5jbGFzcyBQYXNzTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG5cdHJlc3VsdDogc3RyaW5nO1xuXHRvblN1Ym1pdDogKHJlc3VsdDogc3RyaW5nKSA9PiB2b2lkO1xuXG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwLCBvblN1Ym1pdDogKHJlc3VsdDogc3RyaW5nKSA9PiB2b2lkKSB7XG5cdFx0c3VwZXIoYXBwKTtcblx0XHR0aGlzLm9uU3VibWl0ID0gb25TdWJtaXQ7XG5cdH1cblxuXHRvbk9wZW4oKSB7XG5cdFx0Y29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XG5cblx0XHRjb250ZW50RWwuY3JlYXRlRWwoXCJoMVwiLCB7IHRleHQ6IFwiRW50ZXIgeW91ciBwYXNzd29yZCB0byByZWFkIHRoYXQuXCIgfSk7XG5cblx0XHRuZXcgU2V0dGluZyhjb250ZW50RWwpXG5cdFx0XHQuc2V0TmFtZShcIlBhc3N3b3JkXCIpXG5cdFx0XHQuYWRkVGV4dCgodGV4dCkgPT5cblx0XHRcdFx0dGV4dC5vbkNoYW5nZSgodmFsdWUpID0+IHtcblx0XHRcdFx0XHR0aGlzLnJlc3VsdCA9IHZhbHVlXG5cdFx0XHRcdH0pKTtcblxuXHRcdG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcblx0XHRcdC5hZGRCdXR0b24oKGJ0bikgPT5cblx0XHRcdFx0YnRuXG5cdFx0XHRcdFx0LnNldEJ1dHRvblRleHQoXCJTdWJtaXRcIilcblx0XHRcdFx0XHQuc2V0Q3RhKClcblx0XHRcdFx0XHQub25DbGljaygoKSA9PiB7XG5cdFx0XHRcdFx0XHR0aGlzLmNsb3NlKCk7XG5cdFx0XHRcdFx0XHR0aGlzLm9uU3VibWl0KHRoaXMucmVzdWx0KTtcblx0XHRcdFx0XHR9KSk7XG5cdH1cblxuXHRvbkNsb3NlKCkge1xuXHRcdGxldCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcblx0XHRjb250ZW50RWwuZW1wdHkoKTtcblx0fVxufVxuXG4vKmNsYXNzIFBhc3NNb2RhbCBleHRlbmRzIE1vZGFsIHtcblx0cmVzdWx0OiBzdHJpbmc7XG5cdG9uU3VibWl0OiAocmVzdWx0OiBzdHJpbmcpID0+IHZvaWQ7XG5cblx0Y29uc3RydWN0b3IoYXBwOiBBcHAsIG9uU3VibWl0OiAocmVzdWx0OiBzdHJpbmcpID0+IHZvaWQpIHtcblx0XHRzdXBlcihhcHApO1xuXHRcdHRoaXMub25TdWJtaXQgPSBvblN1Ym1pdDtcblx0fVxuXG5cdG9uT3BlbigpIHtcblx0XHRjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcblxuXHRcdGNvbnRlbnRFbC5jcmVhdGVFbChcImgxXCIsIHsgdGV4dDogXCJFbnRlciB5b3VyIHBhc3N3b3JkIHRvIHJlYWQgdGhhdC5cIiB9KTtcblxuXHRcdGNvbnN0IHBhc3N3b3JkSW5wdXQgPSBjb250ZW50RWwuY3JlYXRlRWwoXCJpbnB1dFwiLCB7XG5cdFx0XHRhdHRyOiB7IHR5cGU6IFwicGFzc3dvcmRcIiB9LFxuXHRcdFx0Y2xzOiBcIm1vZC1pbnB1dFwiLFxuXHRcdH0pO1xuXHRcdHBhc3N3b3JkSW5wdXQub25pbnB1dCA9IChldnQpID0+IHtcblx0XHRcdHRoaXMucmVzdWx0ID0gKGV2dC50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWU7XG5cdFx0fTtcblxuXHRcdG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcblx0XHRcdC5hZGRCdXR0b24oKGJ0bikgPT5cblx0XHRcdFx0YnRuXG5cdFx0XHRcdFx0LnNldEJ1dHRvblRleHQoXCJTdWJtaXRcIilcblx0XHRcdFx0XHQuc2V0Q3RhKClcblx0XHRcdFx0XHQub25DbGljaygoKSA9PiB7XG5cdFx0XHRcdFx0XHR0aGlzLmNsb3NlKCk7XG5cdFx0XHRcdFx0XHR0aGlzLm9uU3VibWl0KHRoaXMucmVzdWx0KTtcblx0XHRcdFx0XHR9KVxuXHRcdFx0KTtcblx0fVxuXG5cblx0b25DbG9zZSgpIHtcblx0XHRsZXQgeyBjb250ZW50RWwgfSA9IHRoaXM7XG5cdFx0Y29udGVudEVsLmVtcHR5KCk7XG5cdH1cbn0qL1xuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUErRTtBQUUvRSxJQUFxQixjQUFyQixjQUF5Qyx1QkFBTztBQUFBLEVBQWhEO0FBQUE7QUFFQyxTQUFPLFdBQVc7QUFBQTtBQUFBLEVBRWxCLE1BQU0sU0FBUztBQUVkLFNBQUssbUNBQW1DLGdCQUFnQixDQUFDLFFBQVEsSUFBSSxNQUFNO0FBQzFFLFlBQU0sWUFBWSxHQUFHLFNBQVMsS0FBSztBQUNuQyxnQkFBVSxZQUFZO0FBRXRCLFlBQU0sT0FBTyxPQUFPLE1BQU0sSUFBSTtBQUM5QixlQUFTLE9BQU87QUFDZixrQkFBVSxTQUFTLE9BQU8sRUFBRSxNQUFNLElBQUksQ0FBQztBQWdCeEMsZ0JBQVUsaUJBQWlCLFNBQVMsWUFBWTtBQUMvQyxZQUFJLFVBQVUsY0FBYyxVQUFVO0FBQ3JDLGdCQUFNLElBQUksUUFBYyxDQUFDLFlBQVk7QUFDcEMsa0JBQU0sUUFBUSxJQUFJLFVBQVUsS0FBSyxLQUFLLENBQUMsV0FBVztBQUNqRCxrQkFBSSx1QkFBTyxxQkFBcUIsUUFBUTtBQUN4QyxtQkFBSyxNQUFNO0FBQ1gsb0JBQU0sTUFBTTtBQUNaLHNCQUFRO0FBQUEsWUFDVCxDQUFDO0FBRUQsa0JBQU0sS0FBSztBQUFBLFVBQ1osQ0FBQztBQUVELGNBQUksS0FBSyxRQUFRLEtBQUssVUFBVTtBQUMvQixzQkFBVSxZQUFZO0FBQ3RCLGdCQUFJLHVCQUFPLGtDQUFrQztBQUM3QyxpQkFBSyxNQUFNO0FBQUEsVUFDWixPQUFPO0FBQ04sc0JBQVUsWUFBWTtBQUN0QixnQkFBSSx1QkFBTyxtQkFBbUI7QUFBQSxVQUMvQjtBQUFBLFFBQ0Q7QUFBQSxNQUNELENBQUM7QUFJRCxnQkFBVSxpQkFBaUIsWUFBWSxNQUFNO0FBQzVDLFlBQUksVUFBVSxjQUFjLGVBQWU7QUFDMUMsb0JBQVUsWUFBWTtBQUN0QixjQUFJLHVCQUFPLDhCQUE4QjtBQUFBLFFBQzFDO0FBQUEsTUFDRCxDQUFDO0FBQUEsSUFFRixDQUFDO0FBQUEsRUFDRjtBQUFBLEVBRUEsTUFBTSxZQUFZO0FBQ2pCLFVBQU0sUUFBUSxJQUFJLFVBQVUsS0FBSyxLQUFLLENBQUMsV0FBVztBQUNqRCxXQUFLLE1BQU07QUFBQSxJQUNaLENBQUM7QUFFRCxVQUFNLEtBQUs7QUFBQSxFQUNaO0FBQ0Q7QUFFQSxJQUFNLFlBQU4sY0FBd0Isc0JBQU07QUFBQSxFQUk3QixZQUFZLEtBQVUsVUFBb0M7QUFDekQsVUFBTSxHQUFHO0FBQ1QsU0FBSyxXQUFXO0FBQUEsRUFDakI7QUFBQSxFQUVBLFNBQVM7QUFDUixVQUFNLEVBQUUsVUFBVSxJQUFJO0FBRXRCLGNBQVUsU0FBUyxNQUFNLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUV0RSxRQUFJLHdCQUFRLFNBQVMsRUFDbkIsUUFBUSxVQUFVLEVBQ2xCLFFBQVEsQ0FBQyxTQUNULEtBQUssU0FBUyxDQUFDLFVBQVU7QUFDeEIsV0FBSyxTQUFTO0FBQUEsSUFDZixDQUFDLENBQUM7QUFFSixRQUFJLHdCQUFRLFNBQVMsRUFDbkIsVUFBVSxDQUFDLFFBQ1gsSUFDRSxjQUFjLFFBQVEsRUFDdEIsT0FBTyxFQUNQLFFBQVEsTUFBTTtBQUNkLFdBQUssTUFBTTtBQUNYLFdBQUssU0FBUyxLQUFLLE1BQU07QUFBQSxJQUMxQixDQUFDLENBQUM7QUFBQSxFQUNOO0FBQUEsRUFFQSxVQUFVO0FBQ1QsUUFBSSxFQUFFLFVBQVUsSUFBSTtBQUNwQixjQUFVLE1BQU07QUFBQSxFQUNqQjtBQUNEOyIsCiAgIm5hbWVzIjogW10KfQo=
