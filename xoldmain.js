/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SecretBlock
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var SecretBlock = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.password = "arrow";
  }
  async onload() {
    this.registerMarkdownCodeBlockProcessor("secret-block", (source, el, _) => {
      const container = el.createEl("div");
      container.className = "secret";
      const rows = source.split("\n");
      for (let row of rows)
        container.createEl("div", { text: row });
      container.addEventListener("click", () => {
        if (container.className === "secret") {
          callback:
            () => this.openModal();
          new import_obsidian.Notice(`res: ${this.res}
pass: ${this.password}`);
          if (this.res === this.password) {
            container.className = "secret-show";
            new import_obsidian.Notice("The content is no longer hidden.");
          } else {
            container.className = "secret";
            new import_obsidian.Notice("Invalid password!");
          }
        }
      });
      container.addEventListener("dblclick", () => {
        if (container.className === "secret-show") {
          container.className = "secret";
          new import_obsidian.Notice("The content has been hidden.");
        }
      });
    });
  }
  async openModal() {
    const modal = new PassModal(this.app, (result) => {
      this.res = result;
      new import_obsidian.Notice(`Password entered: ${this.res}`);
    });
    modal.open();
  }
};
var PassModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "Enter your password to read that." });
    new import_obsidian.Setting(contentEl).setName("Password").addText((text) => text.onChange((value) => {
      this.result = value;
    }));
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Submit").setCta().onClick(() => {
      this.close();
      this.onSubmit(this.result);
    }));
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBNYXJrZG93blJlbmRlcmVyLCBBcHAsIE1vZGFsLCBTZXR0aW5nLCBOb3RpY2UsIGFkZEljb24gfSBmcm9tICdvYnNpZGlhbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlY3JldEJsb2NrIGV4dGVuZHMgUGx1Z2luIHtcblx0cHVibGljIHJlczogc3RyaW5nO1xuXHRwdWJsaWMgcGFzc3dvcmQgPSBcImFycm93XCI7XG5cblx0YXN5bmMgb25sb2FkKCkge1xuXHRcdC8vIFRoaXMgXG5cdFx0dGhpcy5yZWdpc3Rlck1hcmtkb3duQ29kZUJsb2NrUHJvY2Vzc29yKFwic2VjcmV0LWJsb2NrXCIsIChzb3VyY2UsIGVsLCBfKSA9PiB7XG5cdFx0XHRjb25zdCBjb250YWluZXIgPSBlbC5jcmVhdGVFbChcImRpdlwiKTtcblx0XHRcdGNvbnRhaW5lci5jbGFzc05hbWUgPSBcInNlY3JldFwiO1xuXG5cdFx0XHRjb25zdCByb3dzID0gc291cmNlLnNwbGl0KFwiXFxuXCIpO1xuXHRcdFx0Zm9yIChsZXQgcm93IG9mIHJvd3MpXG5cdFx0XHRcdGNvbnRhaW5lci5jcmVhdGVFbChcImRpdlwiLCB7IHRleHQ6IHJvdyB9KTtcblxuXHRcdFx0Y29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG5cdFx0XHRcdGlmIChjb250YWluZXIuY2xhc3NOYW1lID09PSBcInNlY3JldFwiKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2s6ICgpID0+IHRoaXMub3Blbk1vZGFsKCk7XG5cblx0XHRcdFx0XHRuZXcgTm90aWNlKGByZXM6ICR7dGhpcy5yZXN9XFxucGFzczogJHt0aGlzLnBhc3N3b3JkfWApXG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYgKHRoaXMucmVzID09PSB0aGlzLnBhc3N3b3JkKSB7XG5cdFx0XHRcdFx0XHRjb250YWluZXIuY2xhc3NOYW1lID0gXCJzZWNyZXQtc2hvd1wiO1xuXHRcdFx0XHRcdFx0bmV3IE5vdGljZShcIlRoZSBjb250ZW50IGlzIG5vIGxvbmdlciBoaWRkZW4uXCIpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb250YWluZXIuY2xhc3NOYW1lID0gXCJzZWNyZXRcIjtcblx0XHRcdFx0XHRcdG5ldyBOb3RpY2UoJ0ludmFsaWQgcGFzc3dvcmQhJyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0Y29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJkYmxjbGlja1wiLCAoKSA9PiB7XG5cdFx0XHRcdGlmIChjb250YWluZXIuY2xhc3NOYW1lID09PSBcInNlY3JldC1zaG93XCIpIHtcblx0XHRcdFx0XHRjb250YWluZXIuY2xhc3NOYW1lID0gXCJzZWNyZXRcIjtcblx0XHRcdFx0XHRuZXcgTm90aWNlKCdUaGUgY29udGVudCBoYXMgYmVlbiBoaWRkZW4uJyk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0fSk7XG5cdH1cblxuXHRhc3luYyBvcGVuTW9kYWwoKSB7XG5cdFx0Y29uc3QgbW9kYWwgPSBuZXcgUGFzc01vZGFsKHRoaXMuYXBwLCAocmVzdWx0KSA9PiB7XG5cdFx0XHR0aGlzLnJlcyA9IHJlc3VsdDtcblx0XHRcdG5ldyBOb3RpY2UoYFBhc3N3b3JkIGVudGVyZWQ6ICR7dGhpcy5yZXN9YCk7XG5cdFx0fSk7XG5cblx0XHRtb2RhbC5vcGVuKCk7XG5cdH1cbn1cblxuY2xhc3MgUGFzc01vZGFsIGV4dGVuZHMgTW9kYWwge1xuXHRyZXN1bHQ6IHN0cmluZztcblx0b25TdWJtaXQ6IChyZXN1bHQ6IHN0cmluZykgPT4gdm9pZDtcblxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgb25TdWJtaXQ6IChyZXN1bHQ6IHN0cmluZykgPT4gdm9pZCkge1xuXHRcdHN1cGVyKGFwcCk7XG5cdFx0dGhpcy5vblN1Ym1pdCA9IG9uU3VibWl0O1xuXHR9XG5cblx0b25PcGVuKCkge1xuXHRcdGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuXG5cdFx0Y29udGVudEVsLmNyZWF0ZUVsKFwiaDFcIiwgeyB0ZXh0OiBcIkVudGVyIHlvdXIgcGFzc3dvcmQgdG8gcmVhZCB0aGF0LlwiIH0pO1xuXG5cdFx0bmV3IFNldHRpbmcoY29udGVudEVsKVxuXHRcdFx0LnNldE5hbWUoXCJQYXNzd29yZFwiKVxuXHRcdFx0LmFkZFRleHQoKHRleHQpID0+XG5cdFx0XHRcdHRleHQub25DaGFuZ2UoKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5yZXN1bHQgPSB2YWx1ZVxuXHRcdFx0XHR9KSk7XG5cblx0XHRuZXcgU2V0dGluZyhjb250ZW50RWwpXG5cdFx0XHQuYWRkQnV0dG9uKChidG4pID0+XG5cdFx0XHRcdGJ0blxuXHRcdFx0XHRcdC5zZXRCdXR0b25UZXh0KFwiU3VibWl0XCIpXG5cdFx0XHRcdFx0LnNldEN0YSgpXG5cdFx0XHRcdFx0Lm9uQ2xpY2soKCkgPT4ge1xuXHRcdFx0XHRcdFx0dGhpcy5jbG9zZSgpO1xuXHRcdFx0XHRcdFx0dGhpcy5vblN1Ym1pdCh0aGlzLnJlc3VsdCk7XG5cdFx0XHRcdFx0fSkpO1xuXHR9XG5cblx0b25DbG9zZSgpIHtcblx0XHRsZXQgeyBjb250ZW50RWwgfSA9IHRoaXM7XG5cdFx0Y29udGVudEVsLmVtcHR5KCk7XG5cdH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBK0U7QUFFL0UsSUFBcUIsY0FBckIsY0FBeUMsdUJBQU87QUFBQSxFQUFoRDtBQUFBO0FBRUMsU0FBTyxXQUFXO0FBQUE7QUFBQSxFQUVsQixNQUFNLFNBQVM7QUFFZCxTQUFLLG1DQUFtQyxnQkFBZ0IsQ0FBQyxRQUFRLElBQUksTUFBTTtBQUMxRSxZQUFNLFlBQVksR0FBRyxTQUFTLEtBQUs7QUFDbkMsZ0JBQVUsWUFBWTtBQUV0QixZQUFNLE9BQU8sT0FBTyxNQUFNLElBQUk7QUFDOUIsZUFBUyxPQUFPO0FBQ2Ysa0JBQVUsU0FBUyxPQUFPLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFFeEMsZ0JBQVUsaUJBQWlCLFNBQVMsTUFBTTtBQUN6QyxZQUFJLFVBQVUsY0FBYyxVQUFVO0FBQ3JDO0FBQVUsa0JBQU0sS0FBSyxVQUFVO0FBRS9CLGNBQUksdUJBQU8sUUFBUSxLQUFLO0FBQUEsUUFBYyxLQUFLLFVBQVU7QUFFckQsY0FBSSxLQUFLLFFBQVEsS0FBSyxVQUFVO0FBQy9CLHNCQUFVLFlBQVk7QUFDdEIsZ0JBQUksdUJBQU8sa0NBQWtDO0FBQUEsVUFDOUMsT0FBTztBQUNOLHNCQUFVLFlBQVk7QUFDdEIsZ0JBQUksdUJBQU8sbUJBQW1CO0FBQUEsVUFDL0I7QUFBQSxRQUNEO0FBQUEsTUFDRCxDQUFDO0FBRUQsZ0JBQVUsaUJBQWlCLFlBQVksTUFBTTtBQUM1QyxZQUFJLFVBQVUsY0FBYyxlQUFlO0FBQzFDLG9CQUFVLFlBQVk7QUFDdEIsY0FBSSx1QkFBTyw4QkFBOEI7QUFBQSxRQUMxQztBQUFBLE1BQ0QsQ0FBQztBQUFBLElBRUYsQ0FBQztBQUFBLEVBQ0Y7QUFBQSxFQUVBLE1BQU0sWUFBWTtBQUNqQixVQUFNLFFBQVEsSUFBSSxVQUFVLEtBQUssS0FBSyxDQUFDLFdBQVc7QUFDakQsV0FBSyxNQUFNO0FBQ1gsVUFBSSx1QkFBTyxxQkFBcUIsS0FBSyxLQUFLO0FBQUEsSUFDM0MsQ0FBQztBQUVELFVBQU0sS0FBSztBQUFBLEVBQ1o7QUFDRDtBQUVBLElBQU0sWUFBTixjQUF3QixzQkFBTTtBQUFBLEVBSTdCLFlBQVksS0FBVSxVQUFvQztBQUN6RCxVQUFNLEdBQUc7QUFDVCxTQUFLLFdBQVc7QUFBQSxFQUNqQjtBQUFBLEVBRUEsU0FBUztBQUNSLFVBQU0sRUFBRSxVQUFVLElBQUk7QUFFdEIsY0FBVSxTQUFTLE1BQU0sRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBRXRFLFFBQUksd0JBQVEsU0FBUyxFQUNuQixRQUFRLFVBQVUsRUFDbEIsUUFBUSxDQUFDLFNBQ1QsS0FBSyxTQUFTLENBQUMsVUFBVTtBQUN4QixXQUFLLFNBQVM7QUFBQSxJQUNmLENBQUMsQ0FBQztBQUVKLFFBQUksd0JBQVEsU0FBUyxFQUNuQixVQUFVLENBQUMsUUFDWCxJQUNFLGNBQWMsUUFBUSxFQUN0QixPQUFPLEVBQ1AsUUFBUSxNQUFNO0FBQ2QsV0FBSyxNQUFNO0FBQ1gsV0FBSyxTQUFTLEtBQUssTUFBTTtBQUFBLElBQzFCLENBQUMsQ0FBQztBQUFBLEVBQ047QUFBQSxFQUVBLFVBQVU7QUFDVCxRQUFJLEVBQUUsVUFBVSxJQUFJO0FBQ3BCLGNBQVUsTUFBTTtBQUFBLEVBQ2pCO0FBQ0Q7IiwKICAibmFtZXMiOiBbXQp9Cg==
